{"version":3,"sources":["components/SmallPicture.js","components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Image","Title","a","SmallPicture","props","href","link","title","style","backgroundImage","image","Grid","console","log","content","contentType","map","item","index","key","id","_id","projects","story","App","src","className","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wxBAGA,IAAMA,EAAUC,IAAOC,IAAV,KAMPC,EAAQF,IAAOC,IAAV,KAYLE,EAAQH,IAAOI,EAAV,KAiBIC,EAZM,SAACC,GAElB,OACI,kBAAC,EAAD,KACI,kBAACH,EAAD,CAAOI,KAAMD,EAAME,MAAOF,EAAMG,OAChC,uBAAGF,KAAMD,EAAME,MACX,kBAACN,EAAD,CAAOQ,MAAO,CAACC,gBAAiB,OAAOL,EAAMM,MAAM,U,6KC3BnE,IAoBeC,EApBF,SAACP,GACVQ,QAAQC,IAAIT,EAAMU,SAClBF,QAAQC,IAAIT,EAAMW,aAElB,IAAMlB,EAAUC,IAAOC,IAAV,KAOb,OACI,kBAACF,EAAD,KACKO,EAAMU,QAAQE,KAAI,SAACC,EAAMC,GACtB,OAAO,kBAAC,EAAD,CAAcC,IAAKD,EAAOR,MAAOO,EAAKP,MAAOH,MAAOU,EAAKV,MAAOa,GAAIH,EAAKI,IAAKf,KAAMW,EAAKX,YCT1GgB,EAAW,CACb,CACIf,MAAO,aACPG,MAAO,kCACPa,MAAO,cACPjB,KAAM,+CAEV,CACIC,MAAO,SACPG,MAAO,kCACPa,MAAO,cACPjB,KAAM,4CAEV,CACIC,MAAO,YACPG,MAAO,kCACPa,MAAO,cACPjB,KAAM,6CAEV,CACIC,MAAO,gBACPG,MAAO,kCACPa,MAAO,cACPjB,KAAM,wCAqBCkB,MAjBf,WACE,OACE,6BACI,2CACA,yBAAKC,IAAI,yGAAyGC,UAAU,aAAaC,IAAI,KAC7I,iDACA,uBAAGD,UAAU,aAAb,sRACA,2CACA,kBAAC,EAAD,CAAMZ,QAASQ,IACf,uCACA,8DACA,uBAAGjB,KAAK,4CAAR,YAA+D,6BAC/D,uBAAGA,KAAK,iCAAR,UAAkD,+BCrCtCuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.2c0de879.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 30vw;\n    margin: 2vh 1vw;\n`\nconst Image = styled.div`\n    width: 30vw;\n    height: 15vw;\n    margin: 0 7vw;\n    border: 5px solid darkgray;\n    border-radius: 10px;\n    background-size: cover;\n    background-repeat: no-repeat;\n    background-position: center;\n`\n//Consider: user metadata of image to find width and height\n\nconst Title = styled.a`\n    height: 5vh;\n    color: yellow;\n`\n\nconst SmallPicture = (props) => {\n    //const link = `/${props.contentType}/${props.id}`\n    return(\n        <Wrapper>\n            <Title href={props.link}>{props.title}</Title>\n            <a href={props.link}>\n                <Image style={{backgroundImage: \"url(\"+props.image+\")\"}}/>\n            </a>\n        </Wrapper>\n    )\n}\n\nexport default SmallPicture","import React from 'react'\nimport styled from 'styled-components'\n\nimport SmallPicture from './SmallPicture'\n\nconst Grid = (props) => {\n    console.log(props.content)\n    console.log(props.contentType)\n    \n    const Wrapper = styled.div`\n        display: flex;\n        flex-wrap: wrap;\n        width: 80vw;\n        padding: 0 10vw;\n    `\n\n    return(\n        <Wrapper>\n            {props.content.map((item, index) => {\n                return <SmallPicture key={index} image={item.image} title={item.title} id={item._id} link={item.link}/>\n            })}\n        </Wrapper>\n    )\n}\n\nexport default Grid","import React from 'react';\nimport './App.css';\n\nimport Grid from './components/Grid'\n\n//Header\n//About Me\n//My Projects\n//Contact\n\nconst projects = [\n    {\n        title: 'RCT Island',\n        image: 'https://i.imgur.com/zL3xzIh.png',\n        story: 'bottom text',\n        link: 'https://github.com/dylangygax/rct-forum-api'\n    },\n    {\n        title: 'Bander',\n        image: 'https://i.imgur.com/bQd23Ev.png',\n        story: 'bottom text',\n        link: 'https://github.com/dylangygax/bander-api'\n    },\n    {\n        title: 'The Table',\n        image: 'https://i.imgur.com/2a0p63v.png',\n        story: 'bottom text',\n        link: 'http://thetabletopsessions.herokuapp.com/'\n    },\n    {\n        title: 'Penguin Poker',\n        image: 'https://i.imgur.com/ZajqI6P.png',\n        story: 'bottom text',\n        link: 'https://dylangygax.github.io/poker/'\n    },\n]\n\nfunction App() {\n  return (\n    <div>\n        <h1>Dylan Gygax</h1>\n        <img src='https://avatars1.githubusercontent.com/u/67247993?s=400&u=15af18a7900dc87742718c025f9a805bd5b76cd1&v=4' className='profilePic' alt=''/>\n        <h2>Software Engineer</h2>\n        <p className='statement'>Software engineer with a passion for tackling large projects from their most abstract concepts to their tiniest details. A background in teaching helps me to be a clear communicator and I am laser focused on creating the best experience for both collaborators and end users.</p>\n        <h3>My Projects</h3>\n        <Grid content={projects}/>\n        <h3>Contact</h3>\n        <p>Email me at Dylan.Gygax@ncf.edu</p>\n        <a href='https://www.linkedin.com/in/dylan-gygax/'>LinkedIn</a><br />\n        <a href='https://github.com/dylangygax'>Github</a><br /> \n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}